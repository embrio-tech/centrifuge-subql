type Timekeeper @entity {
  id: ID! # "global"
  lastPeriodStart: Date!
}

type Pool @entity {
  id: ID! #poolId
  # It's not possible to simply retrieve all entities, but it is supported
  # to get all entities by a field. Hence we add the same type field to all
  # pools, so we can do Pool.getByType("POOL").
  type: String! @index

  createdAt: Date!
  createdAtBlockNumber: Int!

  currency: Currency!
  metadata: String!

  minEpochTime: Int!
  maxPortfolioValuationAge: Int!

  # This cannot reference Pool directly, since this leads to a cyclic dependency.
  currentEpoch: Int!
  lastEpochClosed: Int
  lastEpochExecuted: Int

  #States
  portfolioValuation: BigInt!
  totalReserve: BigInt!
  availableReserve: BigInt!
  maxReserve: BigInt!
  sumDebt: BigInt!
  value: BigInt!

  # Aggregated transaction data over the last period
  sumBorrowedAmount_: BigInt
  sumRepaidAmount_: BigInt
  sumInvestedAmount_: BigInt
  sumRedeemedAmount_: BigInt
  sumNumberOfLoans_: BigInt

  sumNumberOfActiveLoans: BigInt!
  sumDebtOverdue: BigInt!
  sumDebtWrittenOff_: BigInt!

  # Cumulated transaction data since pool creation
  sumBorrowedAmount: BigInt
  sumNumberOfLoans: BigInt

  tranches: [Tranche] @derivedFrom(field: "pool")
}

#Tracks PoolState over Time
type PoolSnapshot @entity {
  id: ID! #poolId-blockNumber
  pool: Pool!

  timestamp: Date!
  blockNumber: Int!
  periodStart: Date! @index

  #States
  portfolioValuation: BigInt!
  totalReserve: BigInt!
  availableReserve: BigInt!
  maxReserve: BigInt!
  sumDebt: BigInt!
  value: BigInt!

  # Aggregated transaction data over the last period
  sumBorrowedAmount_: BigInt
  sumRepaidAmount_: BigInt
  sumInvestedAmount_: BigInt
  sumRedeemedAmount_: BigInt
  sumNumberOfLoans_: BigInt

  sumNumberOfActiveLoans: BigInt!

  # Cumulated transaction data since pool creation
  sumBorrowedAmount: BigInt
  sumNumberOfLoans: BigInt
}

type Tranche @entity {
  id: ID! #poolId-trancheId
  index: Int!
  type: String! @index
  pool: Pool! @index

  trancheId: String!

  isResidual: Boolean!
  seniority: Int!
  interestRatePerSec: BigInt
  minRiskBuffer: BigInt

  isActive: Boolean! @index

  tokenSupply: BigInt
  tokenPrice: BigInt
  sumDebt: BigInt

  sumOutstandingInvestOrders_: BigInt!
  sumOutstandingRedeemOrders_: BigInt!
  sumOutstandingRedeemOrdersCurrency_: BigInt!

  sumFulfilledInvestOrders_: BigInt!
  sumFulfilledRedeemOrders_: BigInt!
  sumFulfilledRedeemOrdersCurrency_: BigInt!

  yield30DaysAnnualized: BigInt
  yield90DaysAnnualized: BigInt
  yieldSinceInception: BigInt
  yieldSinceLastPeriod: BigInt
}

type TrancheSnapshot @entity {
  id: ID! #poolId-trancheId-blockNumber
  tranche: Tranche!

  timestamp: Date!
  blockNumber: Int!
  periodStart: Date! @index

  tokenSupply: BigInt
  tokenPrice: BigInt
  sumDebt: BigInt

  sumOutstandingInvestOrders_: BigInt!
  sumOutstandingRedeemOrders_: BigInt!
  sumOutstandingRedeemOrdersCurrency_: BigInt!

  sumFulfilledInvestOrders_: BigInt!
  sumFulfilledRedeemOrders_: BigInt!
  sumFulfilledRedeemOrdersCurrency_: BigInt!

  yield30DaysAnnualized: BigInt
  yield90DaysAnnualized: BigInt
  yieldSinceInception: BigInt
  yieldSinceLastPeriod: BigInt
}

type Epoch @entity {
  id: ID! #poolId-epochIndex
  pool: Pool!

  index: Int!

  openedAt: Date!
  closedAt: Date
  executedAt: Date

  # Aggregated data during this epoch
  sumBorrowedAmount: BigInt!
  sumRepaidAmount: BigInt!
  sumInvestedAmount: BigInt!
  sumRedeemedAmount: BigInt!

  epochStates: [EpochState] @derivedFrom(field: "epoch")

  investorTransactions: [InvestorTransaction] @derivedFrom(field: "epoch")
}

type EpochState @entity {
  id: ID! #poolId-epochIndex-trancheId
  epoch: Epoch! @index
  trancheId: String!

  tokenPrice: BigInt

  sumOutstandingInvestOrders: BigInt!
  sumOutstandingRedeemOrders: BigInt!
  sumOutstandingRedeemOrdersCurrency: BigInt!
  sumFulfilledInvestOrders: BigInt
  sumFulfilledRedeemOrders: BigInt
  sumFulfilledRedeemOrdersCurrency: BigInt

  investFulfillmentPercentage: BigInt
  redeemFulfillmentPercentage: BigInt
}

enum InvestorTransactionType {
  INVEST_ORDER_UPDATE
  REDEEM_ORDER_UPDATE
  INVEST_ORDER_CANCEL
  REDEEM_ORDER_CANCEL
  INVEST_EXECUTION
  REDEEM_EXECUTION
  TRANSFER_IN
  TRANSFER_OUT
  INVEST_COLLECT
  REDEEM_COLLECT
}

type OutstandingOrder @entity {
  id: ID! # pool id - tranche id - investor address
  hash: String!
  account: Account! @index #Account @index
  pool: Pool! @index
  tranche: Tranche! @index
  epochNumber: Int!
  timestamp: Date!

  investAmount: BigInt!
  redeemAmount: BigInt!
}

type InvestorTransaction @entity {
  id: ID! # extrinsic hash - epoch number - transaction type
  hash: String!
  account: Account! @index #Account @index
  pool: Pool! @index
  tranche: Tranche! @index
  epochNumber: Int!
  timestamp: Date!
  epoch: Epoch! @index

  type: InvestorTransactionType!
  tokenAmount: BigInt
  currencyAmount: BigInt
  tokenPrice: BigInt
  transactionFee: BigInt
}

enum BorrowerTransactionType {
  CREATED
  PRICED
  BORROWED
  REPAID
  CLOSED
}

type BorrowerTransaction @entity {
  id: ID! # extrinsic hash - epoch number - transaction type
  timestamp: Date!
  pool: Pool! @index
  hash: String!

  account: Account! @index
  epochNumber: Int!
  epoch: Epoch! @index
  loan: Loan!
  type: BorrowerTransactionType!

  # only applies to BORROWED and REPAID transactions
  amount: BigInt
}

type Account @entity {
  id: ID!

  anonymousProxies: [AnonymousProxy] @derivedFrom(field: "account")

  investorTransactions: [InvestorTransaction] @derivedFrom(field: "account")
  borrowerTransactions: [BorrowerTransaction] @derivedFrom(field: "account")

  outstandingOrders: [OutstandingOrder] @derivedFrom(field: "account")
  trancheBalances: [TrancheBalance] @derivedFrom(field: "account")
  currencyBalances: [CurrencyBalance] @derivedFrom(field: "account")
}

type TrancheBalance @entity {
  id: ID! # address - pool id - tranche id
  account: Account! @index
  pool: Pool! @index
  tranche: Tranche! @index

  sumInvestOrderedAmount: BigInt!
  sumInvestUncollectedAmount: BigInt!
  sumInvestCollectedAmount: BigInt!

  sumRedeemOrderedAmount: BigInt!
  sumRedeemUncollectedAmount: BigInt!
  sumRedeemCollectedAmount: BigInt!
}

type CurrencyBalance @entity {
  id: ID! # address - currencyId
  account: Account! @index

  currency: Currency!
  amount: BigInt!
}

enum LoanStatus {
  CREATED
  ACTIVE
  CLOSED
}

enum LoanType {
  BulletLoan
  CreditLine
  CreditLineWithMaturity
}

type Loan @entity {
  id: ID! # poolId - loanId
  createdAt: Date!

  collateralNftClassId: BigInt!
  collateralNftItemId: BigInt!

  metadata: String

  advanceRate: BigInt
  value: BigInt
  probabilityOfDefault: BigInt
  lossGivenDefault: BigInt
  discountRate: BigInt
  maturityDate: Date

  type: LoanType
  spec: String

  interestRatePerSec: BigInt

  isAdminWrittenOff: Boolean

  pool: Pool!

  isActive: Boolean! @index
  status: LoanStatus!

  outstandingDebt: BigInt

  borrowedAmount_: BigInt
  repaidAmount_: BigInt

  writeOffIndex: Int
  writtenOffPercentage_: BigInt
  writtenOffAmount_: BigInt
  penaltyInterestRatePerSec: BigInt
}

type LoanSnapshot @entity {
  id: ID! # poolId - loanId - blockNumber
  loan: Loan!

  timestamp: Date!
  blockNumber: Int!
  periodStart: Date! @index

  outstandingDebt: BigInt

  borrowedAmount_: BigInt
  repaidAmount_: BigInt

  writeOffIndex: Int
  writtenOffPercentage_: BigInt
  writtenOffAmount_: BigInt
  penaltyInterestRatePerSec: BigInt
}

type AnonymousProxy @entity {
  id: ID!

  account: Account! @index
  createdBy: String!
  proxyType: String
}

type Proxy @entity {
  id: ID!

  delegator: String!
  delegatee: String!
  proxyType: String
  isRemoved: Boolean
  delay: Int
}

type Currency @entity {
  id: ID!
  decimals: Int!
}
